pipeline {
    agent any

    environment {
        // Docker Hub credentials (Jenkins Credentials ID)
        DOCKER_HUB_CREDENTIALS = credentials('dockerhub-credentials-id') // Replace with your Jenkins Docker Hub credentials ID
        // Docker Hub Repository Names
        FRONTEND_IMAGE = 'yensiang99/tuberculosis-frontend'
        BACKEND_IMAGE = 'yensiang99/tuberculosis-backend'
        DEPLOY_SERVER = 'root@77.37.44.176' // Replace with your deployment server's SSH user and IP
        DEPLOY_SCRIPT_PATH = '/opt/deploy/deploy.sh' // Replace with the actual path on your deployment server
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/YenSiang99/Tuberculosis.git'
            }
        }
        stage('Build Frontend') {
            steps {
                script {
                    docker.build("${FRONTEND_IMAGE}:latest", './frontend')
                }
            }
        }
        // stage('Build Backend') {
        //     steps {
        //         script {
        //             docker.build("${BACKEND_IMAGE}:latest", './backend')
        //         }
        //     }
        // }
        stage('Push Images to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-credentials-id') {
                        echo "Pushing frontend image to Docker Hub"
                        docker.image("${FRONTEND_IMAGE}:latest").push('latest')
                    }
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                sshagent(['deploy-server-ssh-key']) { // Replace with your Jenkins SSH credentials ID
                    sh """
                        ssh -o StrictHostKeyChecking=no ${DEPLOY_SERVER} 'bash ${DEPLOY_SCRIPT_PATH}'
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'CI/CD Pipeline completed successfully.'
        }
        failure {
            echo 'CI/CD Pipeline failed.'
        }
    }
}
